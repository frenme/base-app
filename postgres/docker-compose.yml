version: '3.8'
x-postgres-common:
  &postgres-common
  image: postgres:17-alpine
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U ${POSTGRES_USER} --dbname=${POSTGRES_DB}'
    interval: 10s
    timeout: 5s
    retries: 5

services:
  haproxy:
    image: haproxy:latest
    container_name: haproxy
    ports:
      - "5432:5432"
      - "5433:5433"
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - postgres-replica1
      - postgres-replica2

  postgres-master:
    <<: *postgres-common
    container_name: postgres-master
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
    volumes:
      - ./00_init.sql:/docker-entrypoint-initdb.d/00_init.sql

  postgres-replica1:
    <<: *postgres-common
    container_name: postgres-replica1
    environment:
      PGUSER: ${REPLICA_USER}
      PGPASSWORD: ${REPLICA_PASSWORD}
    volumes:
      - ./init-replica.sh:/usr/local/bin/init-replica.sh:ro
    command: ["/bin/bash", "/usr/local/bin/init-replica.sh"]
    depends_on:
      - postgres-master

  postgres-replica2:
    <<: *postgres-common
    container_name: postgres-replica2
    environment:
      PGUSER: ${REPLICA_USER}
      PGPASSWORD: ${REPLICA_PASSWORD}
    volumes:
      - ./init-replica.sh:/usr/local/bin/init-replica.sh:ro
    command: [ "/bin/bash", "/usr/local/bin/init-replica.sh" ]
    depends_on:
      - postgres-master